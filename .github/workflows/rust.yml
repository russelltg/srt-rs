name: Rust

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:

    runs-on: ${{matrix.os}}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, windows, macos]
        extra_flags: [""]
        include:
          - os: ubuntu
            extra_flags: --target=i686-unknown-linux-gnu

    # disable SRT interop tests on windows
    env:
      SRT_ALLOW_NO_INTEROP_TESTS: matrix.os == "windows" && 1 || null
      RUST_LOG: info
      RUST_BACKTRACE: 1

    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
    - uses: Swatinem/rust-cache@v1
    - name: install target
      run: rustup target add i686-unknown-linux-gnu && sudo dpkg --add-architecture i386 && sudo apt-get update && sudo apt-get install gcc-multilib srt-tools:i386
      if: matrix.extra_flags != ''
    - name: install srt (linux)
      run: sudo apt-get install srt-tools
      if: matrix.os == 'ubuntu'
    - name: install srt (macos)
      run: |
        brew update && brew install srt
        export LIBSRT_PATH="$(brew --prefix srt)/lib/libsrt.dylib"
      if: matrix.os == 'macos'
    - name: Build
      run: cargo build ${{ matrix.extra_flags }} --tests --examples --verbose
    - name: Run tests
      run: cargo test ${{ matrix.extra_flags }} --verbose
      
  clippy:
    runs-on: ubuntu-latest
    steps:
    - name: install ffmpeg
      run: sudo apt update && sudo apt-get install libavformat-dev libswscale-dev
    - uses: actions/checkout@v2
    - name: Cargo clippy
      run: cargo clippy --tests --examples --features ac-ffmpeg -- -D clippy::all
  
  formatting:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Check formatting
      run: cargo fmt -- --check

  coverage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
       fetch-depth: "0"
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly-2021-11-27
    - uses: Swatinem/rust-cache@v1
    - name: Set nightly to defualt
      run: rustup default nightly-2021-11-27
    - name: Install llvm-tools-preview
      run: rustup component add --toolchain nightly-2021-11-27 llvm-tools-preview
    - name: install srt
      run: sudo apt-get install srt-tools
    - name: Download grcov
      run: wget https://github.com/mozilla/grcov/releases/download/v0.8.2/grcov-linux-x86_64.tar.bz2 -O grcov.tar.bz2 && tar -xf grcov.tar.bz2
    - name: Build with profdata
      run: RUSTFLAGS="-Zinstrument-coverage" cargo +nightly-2021-11-27 test --no-run --features=log_disable
    - name: Generate reports
      run: RUSTFLAGS="-Zinstrument-coverage" LLVM_PROFILE_FILE="srt.%p.profraw" cargo +nightly-2021-11-27 test --features=log_disable
    - name: Delete invalid profdata files
      run: set -x; for p in $(find . -name "*.profraw"); do $(find $(rustc --print sysroot) -name llvm-profdata) show $p > /dev/null || rm $p; done
    - name: Run grcov
      run: RUSTUP_TOOLCHAIN=nightly-2021-11-27 ./grcov . --llvm --binary-path ./target/debug/ -t lcov -s . --ignore '*/examples/*' --ignore '*/tests/*' -o lcov.info
    - name: Upload results
      run: bash <(curl -s https://codecov.io/bash) -f lcov.info